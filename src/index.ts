import { App } from './App';

const app = new App();
app.start();

// TODO backlog (авторизация):
// - БАГ: тип User изменился, но он стоит как тип возвращаемого объекта из БД в
// методах UserRepository и он НЕ совпадает с типом
// возращаемого объекта из БД (нейминг разный, не все поля есть)!!!
// Стоит создать тип например DBUser + внутри репозитория преобразовывать ответ из БД (DTO?)
// к типу User и уже его возвращать
// - Также проверить такой баг в других слоях

// - Проверить все изменения в коде на пропуск await
// - Добавить роли (см. гайд Простая авторизация на NODE JS - ulbi tv)
// - Добавить отправку кода или ссылки подтверждения на почту (если подтверждена)
// при логине (и м.б. ещё где-то)
// - Может все данные, связанные с авторизацией, такие как email, password и т.д.
// хранить в отдельной таблице?
// - Переделать слои пользователя, добавив авторизацию + переделать таблицы, типы и т.д.
// - Проверить, что обновлённая схема и тип пользователя работают и
// используются нормально (и стоит ли выкидывать id?)
// - Исправить: пользователь может поменять email, но isEmailVerified останется прежним
// - Продумать смену почты и пароля, может стоит вынести этот функционал в auth?
// - Проверить валидацию создания постов, указав пустые поля. Т.к. там например title: z.string()
// - Поправить тесты
// Слои юзера были немного изменены (добавлены новые поля), старые тесты должны упасть!
// - Сделать миграцию БД
// - Убрать хардкод /api/auth/verify-email/: для этого нужно создать файл config/routes.ts
// и там определить и экспортировать базовые и все остальные маршруты как строки.
// Таким образом, будет определён единый источник правды для маршрутов в приложении,
// что позволит избавиться от хардкода маршрута как в AuthService.ts
// Также стоит учесть поддержку версий (хотя бы 2) при продумывании констант
// В частности для verify-email может использоваться только одна версия, поэтому
// надо определить в .env API_CURRENT_VERSION
// (опицонально в routes пременную EMAIL_VERIFY_VERSION, если API_CURRENT_VERSION не подходит)
// Насчёт версий (идея): каждая версия собирается и подключается вручную в App.ts, но
// функционал, который может работать только на одной версии (как ссылка для вериф. почты)
// будет работать на версии, указанной в API_CURRENT_VERSION
// (в редких случаях в качестве исключения можно определять отдельную переменную
// вроде EMAIL_VERIFY_VERSION)
// - Как-нибудь вычищать просроченные записи из email_verifications
// - Покрыть тестами новый функционал хотя бы частично
// - Желательно пересмотреть систему ошибок и сделать разные типы ошибок в приложении,
// улучшить middleware обработки ошибок.
// - Обновить .env

// - (опционально) сделать в других таблицах timestamp создания (м.б. дату обновления/просрочки)
// - (опционально) переделать схемы zod, сделав базовую схему и наследоваться от неё
//   + пересмотреть схемы валидации, может немного поправить описание
// - (опционально) добавить валидацию файлов на формат, размер
// - (опционально) добавить версионирование апи (например /api/v1/...)
// и apiRouterV1 - базовый роутер, в который подключаются другие роутеры.
// Он задаёт базовый маршрут для всех роутов /api/v1
// - (опционально) создать коллекцию в postman
// - (опционально) сделать тип для id (юзеров, постов и т.д., но наверное это лишнее)
